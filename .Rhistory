})
#Run regression
fit <- reactive({
lm(input$y_axisInput ~ input$x_axisInput, data=filtered_data())
}
)
#Histogram
output$residualsOutput <- renderPlot({
fit <- c(2,5,6,7,4,5,3,2,7,6)
hist(residuals(fit()), main="", xlab=input$x_axisInput)
})
#Create and return a correlation table
output$correlationOutput <- renderTable({
cor(filtered_data())
})
}
# Run the app
shinyApp(ui = ui, server = server)
dplyr::mpg
mpg
df_mpg <- mpg %>% filter(hwy >=22 & hwy <= 35)
df_mpg <- select_if(df_mpg, is.numeric)
df_mpg
fit_test <- lm(hwy~ displ, data=df_mpg)
residuals(fit_test)
histogram(residuals(fit_test))
hist(residuals(fit_test))
# Define server logic - what do you want the R code to do?
server <- function(input, output) {
#Filter the data using the hwy inputs
filtered_data <- reactive({
df_mpg %>% filter(hwy >= input$mpghwyInput[1] & hwy <= input$mpghwyInput[2])
})
#Create a scatter plot using the x and y axis
output$scatterOutput <-  renderPlot({
xcol <- input$x_axisInput
ycol <- input$y_axisInput
ggplot(filtered_data(), aes_string(x=xcol, y=ycol)) +
geom_point() +
geom_smooth(method='lm',formula=y~x, color='blue')
})
#Run regression
fit <- reactive({
lm(input$y_axisInput ~ input$x_axisInput, data=filter(df_mpg, hwy >= input$mpghwyInput[1] & hwy <= input$mpghwyInput[2]))
}
)
#Histogram
output$residualsOutput <- renderPlot({
fit <- c(2,5,6,7,4,5,3,2,7,6)
hist(residuals(fit()), main="", xlab=input$x_axisInput)
})
#Create and return a correlation table
output$correlationOutput <- renderTable({
cor(filtered_data())
})
}
# Run the app
shinyApp(ui = ui, server = server)
# Define server logic - what do you want the R code to do?
server <- function(input, output) {
#Filter the data using the hwy inputs
filtered_data <- reactive({
df_mpg %>% filter(hwy >= input$mpghwyInput[1] & hwy <= input$mpghwyInput[2])
})
#Create a scatter plot using the x and y axis
output$scatterOutput <-  renderPlot({
xcol <- input$x_axisInput
ycol <- input$y_axisInput
ggplot(filtered_data(), aes_string(x=xcol, y=ycol)) +
geom_point() +
geom_smooth(method='lm',formula=y~x, color='blue')
})
#Run regression
fit <- reactive({
lm(input$y_axisInput ~ input$x_axisInput, data=filter(df_mpg, hwy >= input$mpghwyInput[1] & hwy <= input$mpghwyInput[2]))
}
)
#Histogram
output$residualsOutput <- renderPlot({
hist(residuals(fit()), main="", xlab=input$x_axisInput)
})
#Create and return a correlation table
output$correlationOutput <- renderTable({
cor(filtered_data())
})
}
# Run the app
shinyApp(ui = ui, server = server)
# Define server logic - what do you want the R code to do?
server <- function(input, output) {
#Filter the data using the hwy inputs
filtered_data <- reactive({
df_mpg %>% filter(hwy >= input$mpghwyInput[1] & hwy <= input$mpghwyInput[2])
})
#Create a scatter plot using the x and y axis
output$scatterOutput <-  renderPlot({
xcol <- input$x_axisInput
ycol <- input$y_axisInput
ggplot(filtered_data(), aes_string(x=xcol, y=ycol)) +
geom_point() +
geom_smooth(method='lm',formula=y~x, color='blue')
})
#Run regression
fit <- reactive({
lm(input$y_axisInput ~ input$x_axisInput,
data=df_mpg)
}
)
#Histogram
output$residualsOutput <- renderPlot({
hist(residuals(fit()), main="", xlab=input$x_axisInput)
})
#Create and return a correlation table
output$correlationOutput <- renderTable({
cor(filtered_data())
})
}
# Run the app
shinyApp(ui = ui, server = server)
summary(fit_test)
residuals(fit_test)
# Define server logic - what do you want the R code to do?
server <- function(input, output) {
#Filter the data using the hwy inputs
filtered_data <- reactive({
df <- df_mpg %>% filter(hwy >= input$mpghwyInput[1] & hwy <= input$mpghwyInput[2])
})
#Create a scatter plot using the x and y axis
output$scatterOutput <-  renderPlot({
xcol <- input$x_axisInput
ycol <- input$y_axisInput
ggplot(filtered_data(), aes_string(x=xcol, y=ycol)) +
geom_point() +
geom_smooth(method='lm',formula=y~x, color='blue')
})
#Run regression
fit <- reactive({
lm(input$y_axisInput ~ input$x_axisInput,
data=df_mpg)
}
)
#Histogram
output$residualsOutput <- renderPlot({
hist(residuals(fit()), main="", xlab=input$x_axisInput)
})
#Create and return a correlation table
output$correlationOutput <- renderTable({
cor(filtered_data())
})
}
# Run the app
shinyApp(ui = ui, server = server)
# Define server logic - what do you want the R code to do?
server <- function(input, output) {
#Filter the data using the hwy inputs
filtered_data <- reactive({
df <- df_mpg %>% filter(hwy >= input$mpghwyInput[1] & hwy <= input$mpghwyInput[2])
})
#Create a scatter plot using the x and y axis
output$scatterOutput <-  renderPlot({
xcol <- input$x_axisInput
ycol <- input$y_axisInput
ggplot(filtered_data(), aes_string(x=xcol, y=ycol)) +
geom_point() +
geom_smooth(method='lm',formula=y~x, color='blue')
})
#Run regression
fit <- reactive({
lm(reformulate(input$x_axisInput, input$y_axisInput), data = filtered_data())
}
)
#Histogram
output$residualsOutput <- renderPlot({
hist(residuals(fit()), main="", xlab=input$x_axisInput)
})
#Create and return a correlation table
output$correlationOutput <- renderTable({
cor(filtered_data())
})
}
# Run the app
shinyApp(ui = ui, server = server)
rm(list=ls())
#Cheatsheet: https://shiny.rstudio.com/images/shiny-cheatsheet.pdf
#Gallyer: https://shiny.rstudio.com/gallery/
df_mpg <- mpg
df_mpg <- select_if(df_mpg, is.numeric)
# Define UI - what do you want your app to look like / contain?
ui <- fluidPage(
titlePanel("Steven Powell"),
sidebarLayout(
sidebarPanel(
"Inputs will go here",
sliderInput("mpghwyInput", "Highway MPG", min(df_mpg$hwy), max(df_mpg$hwy), c(min(df_mpg$hwy), max(df_mpg$hwy))),
selectInput("x_axisInput", "X Axis", colnames(df_mpg), selected="hwy"),
selectInput("y_axisInput", "Y Axis", colnames(df_mpg), selected="displ")
)
,
mainPanel(
h4("Scatter plot and Regression of selected variables"),
plotOutput("scatterOutput"),
br(),
h4("Residuals of Model"),
plotOutput("residualsOutput"),
br(),
h4("Correlation for Filtered Data"),
tableOutput("correlationOutput")
)
)
)
# Define server logic - what do you want the R code to do?
server <- function(input, output) {
#Filter the data using the hwy inputs
filtered_data <- reactive({
df <- df_mpg %>% filter(hwy >= input$mpghwyInput[1] & hwy <= input$mpghwyInput[2])
})
#Create a scatter plot using the x and y axis
output$scatterOutput <-  renderPlot({
xcol <- input$x_axisInput
ycol <- input$y_axisInput
ggplot(filtered_data(), aes_string(x=xcol, y=ycol)) +
geom_point() +
geom_smooth(method='lm',formula=y~x, color='blue')
})
#Run regression
fit <- reactive({
lm(reformulate(input$x_axisInput, input$y_axisInput), data = filtered_data())
}
)
#Histogram
output$residualsOutput <- renderPlot({
hist(residuals(fit()), main="", xlab=input$x_axisInput)
})
#Create and return a correlation table
output$correlationOutput <- renderTable({
cor(filtered_data())
})
}
# Run the app
shinyApp(ui = ui, server = server)
rm(list=ls())
library(forecast)
library(haven)
library(fma)
library(expsmooth)
library(lmtest)
library(zoo)
library(seasonal)
library(tseries)
library(dyn)         ## Allows time series objects to interface with various regression functions
library(tidyverse)
#setwd('C:\\Users\\gavin\\Desktop\\Time_Series_Data\\')
#setwd("C:\\Users\\Grant\Downloads\\")
#setwd ('C:\\Users\\molly\\OneDrive\\Documents\\R\\data\\')
#setwd("C:\\Users\\Bill\\Documents\\NCSU\\Course Work\\Fall\\Time Series\\Homework")
# Import final output Homework #2 .Rdata file from HW2 reposity
#path <- "C:\\Users\\Steven\\Documents\\MSA\\Analytics Foundations\\lab and hw\\Time Series\\HW2\\HW2-Repo\\TS_HW2\\HW2.RData"
#path <- "C:\\Users\\gavin\\Desktop\\Time_Series_Data\\HW2.RData"
#path <- "C:\\Users\\Bill\\Documents\\NCSU\\Course Work\\Fall\\Time Series\\Homework\\HW2.RData"
#path <- "C:\\Users\\Grant\\Documents\\MSA\\Fall\\Time Series\\HW2.RData"
#path <- "C:\\Users\\molly\\OneDrive\\Documents\\R\\data\\HW2.RData"
load(path)
well_ts
############################################
########  ADDRESS SEASONALITY ##############
############################################
# SEASONAL ADF TESTING
# Automated Seasonal Differencing Test Function to find best differences #
## comments by B.Jenista
nsdiffs(well_ts)    ## Result of 0 indicates no differencing required at seasonal level
#ndiffs(diff(well_ts, lag = 12))  ## Alternate method to test seasonal stationarity
#?ndiffs
# IF DETERMINISTIC SEASONALITY
# Fit with dummy variables, need a season variable
lm(well_ts ~ season_variable)
# IF STOCHASTIC SEASONALITY
# Take Differences (differences should be length of season)
diff(well_ts, lag = 12)
############################################
########  IDENTIFY/ADDRESS TREND  ##########
############################################
#ADF TESTING#
#Check rho with lag0
#adf.test(well_ts, alternative = "stationary", k = 0)
# check Tau with other lags (0-2), though Simmons said industry never checks more than "lag2"
ADF.Pvalues <- rep(NA, 3)
for(i in 0:2){
ADF.Pvalues[i+1] <- adf.test(well_ts, alternative = "stationary", k = i)$p.value
}
ADF.Pvalues
ndiffs(well_ts, test="adf")     ## Result of 0
ndiffs(well_ts, test="kpss")    ## Result of 1 indicates 1 difference required for stationarity
ndiffs(well_ts, test="pp")      ## Result of 0
# IF FIT STOCHASTIC TREND
# Take differences
ndiffs(diff(well_ts))
z <- ts(diff(well_ts), start=C(2007,10), frequency = 12)  ## Test for plotting
# IF DETERMINISTIC TREND (all rho/tau p-values < alpha)
# Simmons had no example code on this. Not sure of the simplest way to take errors from trend.
lm(well_ts ~ time_variable)
############################################
########  FINAL STATIONARY SERIES  #########
############################################
# PLOT STATIONARY TIME SERIES
# appears stationary around y = 1.0
plot(well_ts, xlab='Time',ylab='Change in Height (Ft)',main='Stationary Well Time Series Graph')
plot(diff(well_ts), xlab='Time',ylab='Change in Height (Ft)',main='First Difference Well Time Series Graph')   ## test
############################################
########  TIMES SERIES HW3  ################
############################################
rm(list=ls())
library(forecast)
library(haven)
library(fma)
library(expsmooth)
library(lmtest)
library(zoo)
library(seasonal)
library(tseries)
library(dyn)         ## Allows time series objects to interface with various regression functions
library(tidyverse)
#setwd('C:\\Users\\gavin\\Desktop\\Time_Series_Data\\')
#setwd("C:\\Users\\Grant\Downloads\\")
#setwd ('C:\\Users\\molly\\OneDrive\\Documents\\R\\data\\')
#setwd("C:\\Users\\Bill\\Documents\\NCSU\\Course Work\\Fall\\Time Series\\Homework")
# Import final output Homework #2 .Rdata file from HW2 reposity
path <- "C:\\Users\\Steven\\Documents\\MSA\\Analytics Foundations\\lab and hw\\Time Series\\HW2\\HW2-Repo\\TS_HW2\\HW2.RData"
#path <- "C:\\Users\\gavin\\Desktop\\Time_Series_Data\\HW2.RData"
#path <- "C:\\Users\\Bill\\Documents\\NCSU\\Course Work\\Fall\\Time Series\\Homework\\HW2.RData"
#path <- "C:\\Users\\Grant\\Documents\\MSA\\Fall\\Time Series\\HW2.RData"
#path <- "C:\\Users\\molly\\OneDrive\\Documents\\R\\data\\HW2.RData"
load(path)
well_ts
############################################
########  ADDRESS SEASONALITY ##############
############################################
# SEASONAL ADF TESTING
# Automated Seasonal Differencing Test Function to find best differences #
## comments by B.Jenista
nsdiffs(well_ts)    ## Result of 0 indicates no differencing required at seasonal level
#ndiffs(diff(well_ts, lag = 12))  ## Alternate method to test seasonal stationarity
#?ndiffs
# IF DETERMINISTIC SEASONALITY
# Fit with dummy variables, need a season variable
lm(well_ts ~ season_variable)
# IF STOCHASTIC SEASONALITY
# Take Differences (differences should be length of season)
diff(well_ts, lag = 12)
############################################
########  IDENTIFY/ADDRESS TREND  ##########
############################################
#ADF TESTING#
#Check rho with lag0
#adf.test(well_ts, alternative = "stationary", k = 0)
# check Tau with other lags (0-2), though Simmons said industry never checks more than "lag2"
ADF.Pvalues <- rep(NA, 3)
for(i in 0:2){
ADF.Pvalues[i+1] <- adf.test(well_ts, alternative = "stationary", k = i)$p.value
}
ADF.Pvalues
ndiffs(well_ts, test="adf")     ## Result of 0
ndiffs(well_ts, test="kpss")    ## Result of 1 indicates 1 difference required for stationarity
ndiffs(well_ts, test="pp")      ## Result of 0
# IF FIT STOCHASTIC TREND
# Take differences
ndiffs(diff(well_ts))
z <- ts(diff(well_ts), start=C(2007,10), frequency = 12)  ## Test for plotting
# IF DETERMINISTIC TREND (all rho/tau p-values < alpha)
# Simmons had no example code on this. Not sure of the simplest way to take errors from trend.
lm(well_ts ~ time_variable)
############################################
########  FINAL STATIONARY SERIES  #########
############################################
# PLOT STATIONARY TIME SERIES
# appears stationary around y = 1.0
plot(well_ts, xlab='Time',ylab='Change in Height (Ft)',main='Stationary Well Time Series Graph')
plot(diff(well_ts), xlab='Time',ylab='Change in Height (Ft)',main='First Difference Well Time Series Graph')   ## test
# CLEAN ENVIRONMENT
#rm(list=ls(-ts.final))
############################################
########  TIMES SERIES HW3  ################
############################################
rm(list=ls())
library(forecast)
library(haven)
library(fma)
library(expsmooth)
library(lmtest)
library(zoo)
library(seasonal)
library(tseries)
library(dyn)         ## Allows time series objects to interface with various regression functions
library(tidyverse)
#setwd('C:\\Users\\gavin\\Desktop\\Time_Series_Data\\')
#setwd("C:\\Users\\Grant\Downloads\\")
#setwd ('C:\\Users\\molly\\OneDrive\\Documents\\R\\data\\')
#setwd("C:\\Users\\Bill\\Documents\\NCSU\\Course Work\\Fall\\Time Series\\Homework")
# Import final output Homework #2 .Rdata file from HW2 reposity
path <- "C:\\Users\\Steven\\Documents\\MSA\\Analytics Foundations\\lab and hw\\Time Series\\HW2\\HW2-Repo\\TS_HW2\\HW2.RData"
#path <- "C:\\Users\\gavin\\Desktop\\Time_Series_Data\\HW2.RData"
#path <- "C:\\Users\\Bill\\Documents\\NCSU\\Course Work\\Fall\\Time Series\\Homework\\HW2.RData"
#path <- "C:\\Users\\Grant\\Documents\\MSA\\Fall\\Time Series\\HW2.RData"
#path <- "C:\\Users\\molly\\OneDrive\\Documents\\R\\data\\HW2.RData"
load(path)
well_ts
############################################
########  ADDRESS SEASONALITY ##############
############################################
# SEASONAL ADF TESTING
# Automated Seasonal Differencing Test Function to find best differences #
## comments by B.Jenista
nsdiffs(well_ts)    ## Result of 0 indicates no differencing required at seasonal level
#ndiffs(diff(well_ts, lag = 12))  ## Alternate method to test seasonal stationarity
#?ndiffs
# IF DETERMINISTIC SEASONALITY
# Fit with dummy variables, need a season variable
lm(well_ts ~ season_variable)
# IF STOCHASTIC SEASONALITY
# Take Differences (differences should be length of season)
diff(well_ts, lag = 12)
############################################
########  IDENTIFY/ADDRESS TREND  ##########
############################################
#ADF TESTING#
#Check rho with lag0
#adf.test(well_ts, alternative = "stationary", k = 0)
# check Tau with other lags (0-2), though Simmons said industry never checks more than "lag2"
ADF.Pvalues <- rep(NA, 3)
for(i in 0:2){
ADF.Pvalues[i+1] <- adf.test(well_ts, alternative = "stationary", k = i)$p.value
}
ADF.Pvalues
ndiffs(well_ts, test="adf")     ## Result of 0
ndiffs(well_ts, test="kpss")    ## Result of 1 indicates 1 difference required for stationarity
ndiffs(well_ts, test="pp")      ## Result of 0
# IF FIT STOCHASTIC TREND
# Take differences
ndiffs(diff(well_ts))
z <- ts(diff(well_ts), start=C(2007,10), frequency = 12)  ## Test for plotting
# IF DETERMINISTIC TREND (all rho/tau p-values < alpha)
# Simmons had no example code on this. Not sure of the simplest way to take errors from trend.
lm(well_ts ~ time_variable)
############################################
########  FINAL STATIONARY SERIES  #########
############################################
# PLOT STATIONARY TIME SERIES
# appears stationary around y = 1.0
plot(well_ts, xlab='Time',ylab='Change in Height (Ft)',main='Stationary Well Time Series Graph')
plot(diff(well_ts), xlab='Time',ylab='Change in Height (Ft)',main='First Difference Well Time Series Graph')   ## test
# CLEAN ENVIRONMENT
#rm(list=ls(-ts.final))
install.packages(dyn)
install.packages('dyn')
library(dyn)         ## Allows time series objects to interface with various regression functions
load(path)
well_ts
# Import final output Homework #2 .Rdata file from HW2 reposity
path <- "C:\\Users\Steven\\Documents\\MSA\\Analytics Foundations\\lab and hw\\Time Series\\TS_HW2 Repo\\HW2.RData"
# Import final output Homework #2 .Rdata file from HW2 reposity
path <- "C:\\Users\\Steven\\Documents\\MSA\\Analytics Foundations\\lab and hw\\Time Series\\TS_HW2 Repo\\HW2.RData"
load(path)
well_ts
# SEASONAL ADF TESTING
# Automated Seasonal Differencing Test Function to find best differences #
## comments by B.Jenista
nsdiffs(well_ts)    ## Result of 0 indicates no differencing required at seasonal level
#ndiffs(diff(well_ts, lag = 12))  ## Alternate method to test seasonal stationarity
#?ndiffs
# IF DETERMINISTIC SEASONALITY
# Fit with dummy variables, need a season variable
lm(well_ts ~ season_variable)
# IF STOCHASTIC SEASONALITY
# Take Differences (differences should be length of season)
diff(well_ts, lag = 12)
# PLOT STATIONARY TIME SERIES
# appears stationary around y = 1.0
plot(well_ts, xlab='Time',ylab='Change in Height (Ft)',main='Stationary Well Time Series Graph')
plot(diff(well_ts), xlab='Time',ylab='Change in Height (Ft)',main='First Difference Well Time Series Graph')   ## test
plot(well_ts, xlim=c(-2016,2019), xlab='Time',ylab='Change in Height (Ft)',main='Stationary Well Time Series Graph')
plot(well_ts, xlim=c(2016,2019), xlab='Time',ylab='Change in Height (Ft)',main='Stationary Well Time Series Graph')
plot(diff(well_ts), xlim=c(2016,2019), xlab='Time',ylab='Change in Height (Ft)',main='First Difference Well Time Series Graph')   ## test
time(well_ts)
as.yearmon(time(well_ts))
#replotting w/ smaller window
autoplot(well_ts, xlim=c(2016,2019), xlab='Time',ylab='Change in Height (Ft)',main='Stationary Well Time Series Graph')
autoplot(diff(well_ts), xlim=c(2016,2019), xlab='Time',ylab='Change in Height (Ft)',main='First Difference Well Time Series Graph')   ## test
autoplot(diff(well_ts), xlab='Time',ylab='Change in Height (Ft)',main='First Difference Well Time Series Graph')+ xlim(c(2016,2019))   ## test
#replotting w/ smaller window
autoplot(well_ts, xlab='Time',ylab='Change in Height (Ft)',main='Stationary Well Time Series Graph')+
xlim(c(2016,2019))   ## test
autoplot(diff(well_ts), xlab='Time',ylab='Change in Height (Ft)',main='First Difference Well Time Series Graph')+
xlim(c(2016,2019))   ## test
help(autoplot)
library(haven) #necessary for import of SAS
library(Hmisc) # for rcorr.cens()
library(ROCR) # necessary for performance() func
library(tidyverse) # necessary for life in R
# library(brglm)
rm(list=ls()) # for cleaning global environment, to guarantee a clean slate
path <- getwd()
# IF YOU ARE USING R STUDIO, SKIP THESE AND USE THE AUTOMATED HOTNESS BELOW
# If you aren't using R Studio, chose your path wisely...
# path <- "C:\\Users\\Steven\\Documents\\MSA\\Analytics Foundations\\lab and hw\\Logistic\\logistic-insurance\\"
# path <- "C:\\Users\\Grant\\Downloads\\MSA2019LogisticData\\data\\"
# path <- "C:\\Users\\Bill\\Documents\\NCSU\\Course Work\\Fall\\Logistic Regression\\Final Project\\"
# path <- "C:\\Users\\gavin\\Desktop\\Logisitic_Regression_Data\\"
# path <- "C:\\Users\\molly\\folderino7000\\"
path <- dirname(rstudioapi::getActiveDocumentContext()$path) #AUTOMATED HOTNESS
setwd(path)
load("LogisticsHW1.RData")
#DECISION OF THE FINAL MODEL
final.model <- fit2
